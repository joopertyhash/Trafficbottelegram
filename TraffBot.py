#–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @mcscroooge
#–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @mcscroooge
#–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @mcscroooge


from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, \
    InlineKeyboardButton, InputTextMessageContent, InlineQueryResultArticle, InlineQuery
import asyncio


from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import Throttled


import sqlite3
import logging
import string, secrets, hashlib

from config import bot_token, admin_id

import db, keyboard


storage = MemoryStorage()
bot = Bot(token=bot_token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
connection = sqlite3.connect('data.db')
q = connection.cursor()

logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s', level=logging.INFO,)

class Form(StatesGroup):
    memory = State()


@dp.message_handler(Command("start"), state=None)
async def welcome(message):
    text = '–í–∞–º –≤ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    user_id = message.from_user.id
    splited = message.text.split()
    coin = db.prj_info(2)
    min =  db.prj_info(1)
    link_mas = db.links()
    convertList = ' '.join(map(str,link_mas))
    kb_links = keyboard.kb_links()
    if len(link_mas) > 1:
        links_text = '–∫–∞–Ω–∞–ª—ã'
    else:
        links_text = f'*[–∫–∞–Ω–∞–ª](https://t.me/{convertList.split(":")[0]})*'
    
    if len(link_mas) > 1:
        links_text1 = '–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'
    else:
        links_text1 = f'*–ù–∞—à [–∫–∞–Ω–∞–ª](https://t.me/{convertList.split(":")[0]})*'
        
    me = await bot.get_me()
    ref = f'https://t.me/{me.username}?start='
    
    links1 = ''
    
    for links in link_mas:
        links = links.split(":")[0]
        links1 += f'https://t.me/{links}\n'
        
        
    if not db.user_exists(user_id):
        db.create_user(user_id)
        if len(splited) == 2:
            if user_id != int(splited[1]):
                if db.user_exists(int(splited[1])):
                    db.update_refers(user_id, splited[1])
                    await bot.send_message(splited[1], '–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª', reply_markup=keyboard.delete_last)
                    text = '–í–∞—à –¥—Ä—É–≥ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º'
                    
    
    referals = db.user_info(user_id, 2)
    balance = db.user_info(user_id, 3)
    await message.answer_sticker('CAACAgEAAxkBAAEEeG9iWF_JYBhO4NhWg-Am9QIc9Y00PgAC-QEAAq5M8UTUQz6LVFGQySME')
    
    

    if await check_sub(user_id) == False:
        await message.answer(f'*{text} –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç {coin}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {links_text} –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n"ü§ñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å".*', parse_mode="Markdown", reply_markup=kb_links, disable_web_page_preview=True)
    else:
        await message.answer(f'*–ü—Ä–∏–≤–µ—Ç!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.\n\nüë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref}{user_id}\n\n–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *`{referals}`* ‚úÖ\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *`{balance} {coin}`*\n–í—ã–≤–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ *`{min} {coin}`* –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n–í–∞—à ID: *`{user_id}`*\n\n{links_text1} –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º–µ:\n{links1}*', parse_mode="Markdown",reply_markup=keyboard.main_menu, disable_web_page_preview=True)



@dp.message_handler(Command("admin"), state=None)
async def admin(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer(f'*–ê–¥–º–∏–Ω –º–µ–Ω—é*', parse_mode="Markdown", reply_markup=keyboard.admin)
    else:
        pass

    
async def check_sub(user_id):
    array_list = []
    link_mas = db.links()
    for link in link_mas:
        if '+' in link[0]:
            link2 = link.split(":")[1]
        else:
            link2 = '@' + link.split(":")[0]
        chat_member = (await bot.get_chat_member(chat_id=f'{link2}', user_id=user_id))
        if chat_member['status'] == 'left' or chat_member['status'] == 'kicked':
            array_list.append(False)
        else:
            array_list.append(True)

    if False in array_list:
        return False
    else:
        return True







@dp.callback_query_handler(text='check')
async def check(message: types.Message):
    text = '–í–∞–º –≤ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    coin = db.prj_info(2)
    min =  db.prj_info(1)
    link_mas = db.links()
    convertList = ' '.join(map(str,link_mas))
    kb_links = keyboard.kb_links()
    me = await bot.get_me()
    ref = f'https://t.me/{me.username}?start='
    
    links1 = ''
    
    for links in link_mas:
        links = links.split(":")[0]
        links1 += f'https://t.me/{links}\n'
    
    referals = db.user_info(message.from_user.id, 2)
    balance = db.user_info(message.from_user.id, 3)
    if len(link_mas) > 1:
        links_text = '–∫–∞–Ω–∞–ª—ã'
    else:
        links_text = f'*[–∫–∞–Ω–∞–ª](https://t.me/{convertList.split(":")[0]})*'
    
    if len(link_mas) > 1:
        links_text1 = '–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã'
    else:
        links_text1 = f'*–ù–∞—à [–∫–∞–Ω–∞–ª](https://t.me/{convertList.split(":")[0]})*'
    
    await bot.delete_message(message.from_user.id, message.message.message_id)
    if await check_sub(message.from_user.id) == False:
        await bot.send_message(message.from_user.id, f'*{text} –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç {coin}, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {links_text} –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \n"ü§ñ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å".*', parse_mode="Markdown", reply_markup=kb_links, disable_web_page_preview=True)
    else:
        await bot.send_message(message.from_user.id, f'*–ü—Ä–∏–≤–µ—Ç!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.\n\nüë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref}{message.from_user.id}\n\n–ö–æ–ª-–≤–æ –≤–∞—à–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *`{referals}`* ‚úÖ\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: *`{balance} {coin}`*\n–í—ã–≤–æ–¥ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ *`{min} {coin}`* –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n\n–í–∞—à ID: *`{message.from_user.id}`*\n\n{links_text1} –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º–µ:\n{links1}*', parse_mode="Markdown",reply_markup=keyboard.main_menu, disable_web_page_preview=True)
    
@dp.callback_query_handler(text='Deletelast')    
async def delete_last_mes(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)


@dp.callback_query_handler(text='withdraw')
async def withdraw(message: types.Message):
    coin = db.prj_info(2)
    min =  db.prj_info(1)
    balance = db.user_info(message.from_user.id, 3)
    if await check_sub(message.from_user.id) == False:
        await check(message)
    else:
        if float(balance) >= float(min):
            await bot.delete_message(message.from_user.id, message.message.message_id)
            await bot.send_message(message.from_user.id, f'*–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ *`{balance} {coin}`', parse_mode='Markdown', reply_markup=keyboard.withdraw1)
        else:
            await bot.answer_callback_query(callback_query_id=message.id, show_alert=False, text="‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

@dp.callback_query_handler(text='withdraw_request')
async def withdraw_request(message: types.Message):
    balance = db.user_info(message.from_user.id, 3)
    coin = db.prj_info(2)
    if await check_sub(message.from_user.id) == False:
        await check(message)
    else:
        db.update_balance(message.from_user.id)
        await bot.delete_message(message.from_user.id, message.message.message_id)
        await bot.send_message(message.from_user.id, f'*üí≥ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É *`{balance} {coin}`*\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*', parse_mode='Markdown', reply_markup=keyboard.withdraw2)
        await bot.send_message(admin_id, f'*üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *`{message.from_user.id}`* —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–ø–ª–∞—Ç—É *`{balance} {coin}`', parse_mode='Markdown', reply_markup=keyboard.delete_last)



@dp.callback_query_handler(text='download_bd')
async def download_bd(message: types.Message):
    doc = open('data.db', 'rb')
    await bot.send_document(message.from_user.id, doc, reply_markup=keyboard.delete_last)
    


@dp.callback_query_handler(text='amount_users')
async def amount_users(message: types.Message):
    amount = db.amount_users()
    await bot.answer_callback_query(callback_query_id=message.id, show_alert=True, text=f"–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {amount}")
    

@dp.inline_handler()
async def inline_echo(inline_query: InlineQuery):
    me = await bot.get_me()
    coin = db.prj_info(2)
    kbinline = keyboard.inline(me.username, inline_query.from_user.id)
    text = f'‚ù§Ô∏è –ü—Ä–∏–≤–µ—Ç, —è —Ö–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {coin}, –ø—Ä–∏—Å–æ–µ–¥–µ–Ω—è–π—Å—è –∏ —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –±–æ–ª—å—à–µ!'
    input_content = InputTextMessageContent(text)
    result_id: str = hashlib.md5(text.encode()).hexdigest()
    item = InlineQueryResultArticle(
    id=result_id,
    title=f'{text}',
    reply_markup = kbinline,
    input_message_content=input_content,
        )
    await bot.answer_inline_query(inline_query.id, results=[item], cache_time=1)

def generate(length):
    letters_and_digits = string.ascii_letters + string.digits
    crypt_rand_string = ''.join(secrets.choice(
        letters_and_digits) for i in range(length))
    return crypt_rand_string


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @mcscroooge')
    executor.start_polling(dp, skip_updates=True)